name: CI/CD for InternshipTaskOne

on:
  push:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Restore Maven Package
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('/*.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean install -DskipTests

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: docker build -t jumongweb/internship-task-one:latest .

      - name: Push Docker Image to Docker Hub
        run: docker push jumongweb/internship-task-one:latest

      - name: Deploy to AWS EC2
        env:
          PRIVATE_KEY: ${{ secrets.RSA_PRIVATE_KEY }}
          INSTANCE_IP: ${{ secrets.PUBLIC_IPV4 }}
        run: |
          echo "$RSA_PRIVATE_KEY" > terraform-key.pem
          chmod 600 terraform-key.pem
          mkdir -p ~/.ssh
          ssh-keyscan -H $INSTANCE_IP >> ~/.ssh/known_hosts
          ssh -i terraform-key.pem ubuntu@$INSTANCE_IP << 'EOF'

          # Install Docker if not already installed
          if ! command -v docker &> /dev/null; then
            sudo apt update
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
          fi


          # Create Docker network if it doesn't exist
          if ! docker network ls | grep -q internship_network; then
            sudo docker network create internship_network
          fi

          # Stop and remove any existing PostgreSQL container
          if [ "$(docker ps -aq -f name=internship_db_postgres)" ]; then
            sudo docker stop internship_db_postgres
            sudo docker rm internship_db_postgres
          fi

          # Pull and run PostgreSQL container without port binding
          sudo docker run -d --name internship_db_postgres \
            --network internship_network \
            -e POSTGRES_DB=InternshipTaskOne \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=Lt*08161554409 \
            postgres:latest

          # Stop and remove any existing application container
          if [ "$(docker ps -aq -f name=cloud_test)" ]; then
            sudo docker stop InternshipTaskOne
            sudo docker rm InternshipTaskOne
          fi

          # Pull the latest application image
          sudo docker pull jumongweb/internship-task-one:latest

          # Run the application container, connecting to the PostgreSQL container
          sudo docker run -d -p 2021:2020 --name internship-task-one \
            --network internship_network \
            --memory 250m --cpus "0.5" \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://internship_db_postgres:5432/internship_db \
            -e SPRING_DATASOURCE_USERNAME=dev_user \
            -e SPRING_DATASOURCE_PASSWORD=jumong \
            jumongweb/internship-task-one:latest
          EOF

